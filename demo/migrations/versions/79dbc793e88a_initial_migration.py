"""Initial migration.

Revision ID: 79dbc793e88a
Revises: 
Create Date: 2023-04-09 09:21:33.692209

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '79dbc793e88a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('flask_dance_oauthtoken',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('token', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('events')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('created',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('updated',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('updated',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('created',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)

    op.create_table('events',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('page_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_network', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_ip', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_os', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_mobile', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_country_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_country_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_country_region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_continent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_timezone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_languages', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_in_eu', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('click_text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('click_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('event_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('click_class', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('click_data', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='events_user_id_fkey'),
    sa.PrimaryKeyConstraint('event_id', name='events_pkey'),
    sa.UniqueConstraint('event_id', name='events_event_id_key')
    )
    op.drop_table('flask_dance_oauthtoken')
    # ### end Alembic commands ###
